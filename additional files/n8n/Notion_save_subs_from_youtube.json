{
  "name": "Notion save subs from youtube",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -120,
        300
      ],
      "id": "d9db2145-804d-4ddf-a49e-1b9a2e08814c"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": "57c5b12b-7019-466c-bced-93eedae0b0d5",
        "limit": 10,
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Res type|select",
              "condition": "equals",
              "selectValue": "ðŸ“¼ YouTube"
            },
            {
              "key": "Done|formula",
              "condition": "equals",
              "returnType": "checkbox"
            },
            {
              "key": "URL|url",
              "condition": "contains",
              "urlValue": "v="
            },
            {
              "key": "tag|multi_select",
              "condition": "=does_not_contain",
              "multiSelectValue": "=Youtube Subs"
            },
            {
              "key": "# of|select",
              "condition": "does_not_equal",
              "selectValue": ">1"
            }
          ]
        },
        "options": {}
      },
      "name": "empty tag",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [
        120,
        300
      ],
      "notesInFlow": false,
      "id": "c5e7a0d5-1b68-4662-8598-924a05314c2a",
      "credentials": {
        "notionApi": {
          "id": "1",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "executeOnce": false,
        "command": "=\"C:\\Program Files\\yt-dlp\\yt-dlp.exe\" --no-check-certificate --sub-lang \"ru,en\" --write-auto-sub --write-sub --embed-subs --skip-download -o \"test\" \"{{$json[\"property_url\"]}}\" 1>nul && ( (if exist test.ru.vtt (py \"C:\\Program Files\\yt-dlp\\fix_youtube_vtt.py\" test.ru.vtt && echo **###  Subs RU** && echo:  && type test.ru.*.txt && echo:  )) & if exist test.en.vtt (py \"C:\\Program Files\\yt-dlp\\fix_youtube_vtt.py\" test.en.vtt && echo **###  Subs EN** && echo:  && type test.en.*.txt ) ) && del test.*"
      },
      "name": "Execute Command",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        300,
        460
      ],
      "alwaysOutputData": false,
      "id": "8fea7fa9-2e43-417c-b623-179e4ee36308",
      "continueOnFail": true
    },
    {
      "parameters": {
        "mode": "mergeByIndex"
      },
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        480,
        320
      ],
      "id": "ab1e94d3-a375-42f3-b7f8-1d86f255c3ac"
    },
    {
      "parameters": {
        "resource": "block",
        "blockId": "={{$json[\"id_subs_block\"]}}",
        "blockUi": {
          "blockValues": [
            {
              "richText": true,
              "text": {
                "text": [
                  {
                    "text": "={{$json[\"n\"]}}",
                    "annotationUi": {}
                  }
                ]
              }
            }
          ]
        }
      },
      "name": "Notion",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [
        2740,
        320
      ],
      "id": "0b57a7fb-c23d-4d8a-96a0-c7d662b27316",
      "credentials": {
        "notionApi": {
          "id": "1",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let results = [];\n\nlet max_notion_p_length = 2000;\n\n\n// Loop through all input items (which have array values in the reference and cost fields)\nfor (item of items) {\n  let curr_stdout = item.json.stdout;\n  let id_page = item.json.id;\n  let id_subs_block = item.json.id_subs_block;\n  let name = item.json.name;\n  while (curr_stdout.length>0){\n        let curr_stdout_cut = curr_stdout.substring(0, max_notion_p_length);\n\n        var re = /(\\r\\n|\\n|\\r)/gim;\n\n        let array = [...curr_stdout_cut.matchAll(re)];\n        l_index = array[array.length - 1].index;\n        \n        if (curr_stdout.length <=max_notion_p_length )\n          {\n            n_l = curr_stdout;\n            curr_stdout = \"\";\n          }\n        else\n        {\n          n_l = curr_stdout.substring(0, l_index);\n          curr_stdout = curr_stdout.substring(l_index+1, curr_stdout.length);\n        }\n        \n\n\n        console.log(\"l_index :\" + l_index);\n        console.log(\"n_l :\" + n_l);\n        console.log(\"curr_stdout :\" + curr_stdout);\n        console.log(\"------------------------- \"+curr_stdout.length+\" -------------------------\");\n\n        results.push({\n          json: {\n            name: name,\n            id_page: id_page,\n            id_subs_block: id_subs_block,\n            n: n_l.trim(),\n          }\n        });\n  }\n\n}\n\n// Return the results to the next node\nreturn results;"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2520,
        320
      ],
      "id": "4b4b0bb3-b68d-4356-9f3b-0d5f32bd9c00"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": "={{$json[\"id\"]}}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "tag|multi_select",
              "multiSelectValue": "={{$json[\"property_tag\"].length== 0 ? \"Youtube Subs\" : $json[\"property_tag\"] + \",Youtube Subs\"}}"
            }
          ]
        }
      },
      "name": "Notion1",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [
        1240,
        480
      ],
      "id": "3342225c-22df-4218-be6a-a9122c5fec24",
      "credentials": {
        "notionApi": {
          "id": "1",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"stdout\"]}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        880,
        320
      ],
      "id": "7a53707b-5d9f-4639-9292-fce8affcd678"
    },
    {
      "parameters": {
        "executeOnce": false,
        "command": "=\"C:\\Program Files\\yt-dlp\\yt-dlp.exe\" --no-check-certificate --sub-lang ru --write-auto-sub --write-sub --embed-subs --skip-download -o \"test\" \"{{$json[\"property_url\"]}}\" 1>nul && ( if exist test.ru.vtt (py \"C:\\Program Files\\yt-dlp\\fix_youtube_vtt.py\" test.ru.vtt ) & if exist test.en.vtt (py \"C:\\Program Files\\yt-dlp\\fix_youtube_vtt.py\" test.en.vtt ) ) && echo ###  Subs && echo:  && type test.*.txt && del test.*"
      },
      "name": "Execute Command1",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        320,
        680
      ],
      "alwaysOutputData": false,
      "id": "9c5dc2fd-83f6-429a-a9ac-9cc3eccdf517",
      "continueOnFail": true
    },
    {
      "parameters": {
        "resource": "block",
        "blockId": "={{$json[\"id\"]}}",
        "blockUi": {
          "blockValues": [
            {
              "type": "toggle",
              "textContent": "Subs"
            }
          ]
        }
      },
      "name": "Notion2",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [
        1500,
        600
      ],
      "id": "d53a4f00-d276-41a5-a863-cc3f8891533b",
      "credentials": {
        "notionApi": {
          "id": "1",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Code here will run once per input item.\n// More info and help: https://docs.n8n.io/nodes/n8n-nodes-base.functionItem\n// Tip: You can use luxon for dates and $jmespath for querying JSON structures\n\n// Add a new field called 'myNewField' to the JSON of the item\nitem.id_subs_block = item.results[0].id \n\ndelete item.has_more;\ndelete item.next_cursor;\ndelete item.results;\ndelete item.object;\n\nreturn item;"
      },
      "name": "FunctionItem",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        2100,
        960
      ],
      "id": "2641d534-f110-483b-93fa-bcb84b198eb7"
    },
    {
      "parameters": {
        "mode": "mergeByIndex"
      },
      "name": "Merge1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        1980,
        500
      ],
      "id": "3120cfcb-e183-471c-918b-e600969d5b6b"
    },
    {
      "parameters": {
        "mode": "mergeByIndex"
      },
      "name": "Merge2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        2260,
        320
      ],
      "id": "6c93471e-853f-4399-8e12-62b5581a4b91"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "$input.item.json.id_subs_block = $input.item.json.id \n$input.item.json.id_subs_block = $input.item.json.results[0].id\n\n$input.item.json.id\n\ndelete $input.item.json.has_more;\ndelete $input.item.json.next_cursor;\ndelete $input.item.json.results;\ndelete $input.item.json.object;\n\nreturn $input.item;"
      },
      "id": "7173489a-9b12-4ab0-b516-a77329ceadde",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1740,
        760
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all()[0];"
      },
      "id": "15844abe-4a95-48e5-a245-335db6ce1a7a",
      "name": "Return 1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2960,
        320
      ]
    },
    {
      "parameters": {},
      "id": "f6c20459-220e-4226-bae2-b390d8512ddc",
      "name": "When Called By Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        -120,
        80
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "empty tag": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "empty tag",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Notion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "Notion1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notion1": {
      "main": [
        [
          {
            "node": "Notion2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notion2": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Notion": {
      "main": [
        [
          {
            "node": "Return 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Called By Another Workflow": {
      "main": [
        [
          {
            "node": "empty tag",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "versionId": "d6afafdb-b26f-4e66-a9d3-d74f6ca2de1e",
  "id": 9,
  "meta": {
    "instanceId": "d1fdba25bf7c6bc1df4a23ef2a8b6f6effd0a3156de889abe9ed314a495a5a7a"
  },
  "tags": [
    {
      "createdAt": "2022-07-23T09:23:03.555Z",
      "updatedAt": "2022-07-23T09:25:41.548Z",
      "id": "1",
      "name": "ðŸš€ production"
    }
  ]
}